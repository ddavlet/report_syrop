import json
from pathlib import Path

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ChatAction
from aiogram.client.default import DefaultBotProperties

from settings import settings
from core import ReportRegistry
from runner import run_report
import reports  # noqa ‚Äî –∞–≤—Ç–æ–¥–∏—Å–∫–∞–≤–µ—Ä–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤

# --- –¥–æ—Å—Ç—É–ø –ø–æ —Å–ø–∏—Å–∫—É user_id (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) ---
_ALLOWED = set()
if settings.telegram_allowed_user_ids:
    _ALLOWED = {int(x.strip()) for x in settings.telegram_allowed_user_ids.split(",") if x.strip()}

bot = Bot(token=settings.telegram_token, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- –ü—Ä–æ—Å—Ç–∞—è in-memory —Å–µ—Å—Å–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
# –§–æ—Ä–º–∞—Ç: { user_id: {"slug": str, "params": dict} }
_USER_STATE: dict[int, dict] = {}


def _escape_html(text: str) -> str:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è HTML parse_mode —Ç–µ–ª–µ–≥—Ä–∞–º–∞."""
    return (
        text.replace("&", "&amp;")
        .replace("<", "&lt;")
        .replace(">", "&gt;")
    )


def _md_to_tg_html(text: str) -> str:
    """–û—á–µ–Ω—å –ª—ë–≥–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ Markdown –≤ Telegram HTML.

    –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
    - –ó–∞–≥–æ–ª–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è 2-3 (##, ###) ‚Üí <b>...</b>
    - –ñ–∏—Ä–Ω—ã–π **...** ‚Üí <b>...</b>
    - –ò–Ω–ª–∞–π–Ω-–∫–æ–¥ `...` ‚Üí <code>...</code>
    - –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "- " ‚Üí –∑–∞–º–µ–Ω–∏–º –º–∞—Ä–∫–µ—Ä –Ω–∞ ‚Ä¢
    –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–∞–∫ –µ—Å—Ç—å, —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º HTML.
    """
    import re

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏
    esc = _escape_html(text)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ ## –∏ ### ‚Üí –≤—ã–¥–µ–ª–∏–º –∂–∏—Ä–Ω—ã–º
    def repl_h3(m: re.Match) -> str:
        return f"<b>{m.group(1).strip()}</b>\n"

    esc = re.sub(r"^###\s+(.+)$", repl_h3, esc, flags=re.MULTILINE)

    def repl_h2(m: re.Match) -> str:
        return f"<b>{m.group(1).strip()}</b>\n"

    esc = re.sub(r"^##\s+(.+)$", repl_h2, esc, flags=re.MULTILINE)

    # –ñ–∏—Ä–Ω—ã–π **...**
    esc = re.sub(r"\*\*(.+?)\*\*", r"<b>\1</b>", esc)

    # –ò–Ω–ª–∞–π–Ω-–∫–æ–¥ `...`
    esc = re.sub(r"`([^`]+)`", r"<code>\1</code>", esc)

    # –ú–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤: "- " –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ ‚Üí "‚Ä¢ "
    esc = re.sub(r"^(\s*)-\s+", r"\1‚Ä¢ ", esc, flags=re.MULTILINE)

    return esc


def _get_param_presets(slug: str) -> dict[str, list]:
    """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á—ë—Ç–∞ (–∫–Ω–æ–ø–∫–∞–º–∏)."""
    if slug == "average_check":
        return {
            "dim": [
                "overall",
                "client",
                "price_type",
                "month",
                "client_month",
                "price_type_month",
            ],
            "period_days": [7, 14, 30, 60],
        }
    if slug == "declined_flavors":
        return {
            "recent_days": [14, 30, 60],
            "baseline_days": [60, 90, 180],
            "min_item_orders_base": [1, 3, 5],
            "min_client_orders_recent": [1, 2, 3],
            "min_drop_pct": [30, 50, 70],
        }
    if slug == "inactive_clients":
        return {
            "cutoff_days": [30, 60, 90, 120],
        }
    if slug == "new_customers":
        return {
            "period_days": [7, 14, 30, 60],
        }
    if slug == "purchase_frequency":
        return {
            "min_orders": [1, 2, 3, 5],
            "period_days": [7, 14, 30, 60],
        }
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    return {}


def _get_default_params_from_presets(slug: str) -> dict:
    presets = _get_param_presets(slug)
    defaults: dict = {}
    for k, values in presets.items():
        if isinstance(values, list) and values:
            defaults[k] = values[0]
    return defaults


def _render_params_summary(params: dict) -> str:
    if not params:
        return "(–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Äî –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    pairs = [f"<code>{k}</code>=<b>{v}</b>" for k, v in params.items()]
    return ", ".join(pairs)


def _build_params_keyboard(slug: str, params: dict) -> InlineKeyboardMarkup:
    presets = _get_param_presets(slug)
    rows: list[list[InlineKeyboardButton]] = []

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for key, values in presets.items():
        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ‚Äî —Ä—è–¥ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π
        line: list[InlineKeyboardButton] = []
        for v in values:
            is_selected = params.get(key) == v
            label = f"{v}"
            if isinstance(v, bool):
                label = "‚úÖ –î–∞" if v else "üö´ –ù–µ—Ç"
            if is_selected:
                label = f"[{label}]"
            line.append(InlineKeyboardButton(
                text=label,
                callback_data=f"set:{slug}:{key}:{json.dumps(v)}"
            ))
        rows.append(line)

    # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    rows.append([
        InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"do_run:{slug}"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –û–±—ä—è—Å–Ω–µ–Ω–∏–µ", callback_data=f"explain:{slug}"),
    ])
    rows.append([
        InlineKeyboardButton(text="üîÅ –°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"reset:{slug}"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="list_reports"),
    ])

    return InlineKeyboardMarkup(inline_keyboard=rows)


def _check_access(message: Message) -> bool:
    if not _ALLOWED:
        return True  # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
    return message.from_user and message.from_user.id in _ALLOWED


# --- –°—Ç–∞—Ä—Ç: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ "üìä –°–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤"
@dp.message(Command("start"))
async def cmd_start(m: Message):
    if not _check_access(m):
        await m.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤", callback_data="list_reports")]
        ]
    )

    await m.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb)


# --- –ö–Ω–æ–ø–∫–∞: —Å–ø–∏—Å–æ–∫ –æ—Ç—á—ë—Ç–æ–≤
@dp.callback_query(F.data == "list_reports")
async def cb_list_reports(c: CallbackQuery):
    reports_list = ReportRegistry.all()
    if not reports_list:
        await c.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤.")
        return

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cls.title or slug, callback_data=f"run_report:{slug}")]
            for slug, cls in reports_list.items()
        ]
    )
    await c.message.edit_text("–í—ã–±–µ—Ä–∏ –æ—Ç—á—ë—Ç:", reply_markup=kb)


# --- –ö–Ω–æ–ø–∫–∞: –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ‚Üí —ç–∫—Ä–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
@dp.callback_query(F.data.startswith("run_report:"))
async def cb_run_report(c: CallbackQuery):
    slug = c.data.split(":", 1)[1]

    try:
        cls = ReportRegistry.get(slug)
    except KeyError:
        await c.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç—á—ë—Ç: {slug}", show_alert=True)
        return

    user_id = c.from_user.id if c.from_user else 0
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    _USER_STATE[user_id] = {
        "slug": slug,
        "params": _get_default_params_from_presets(slug),
    }

    params = _USER_STATE[user_id]["params"]
    kb = _build_params_keyboard(slug, params)
    await c.message.edit_text(
        f"<b>{cls.title or slug}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏).\n–¢–µ–∫—É—â–∏–µ: {_render_params_summary(params)}",
        reply_markup=kb
    )


# --- –ö–Ω–æ–ø–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä
@dp.callback_query(F.data.startswith("set:"))
async def cb_set_param(c: CallbackQuery):
    try:
        _, slug, key, raw = c.data.split(":", 3)
    except ValueError:
        await c.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    user_id = c.from_user.id if c.from_user else 0
    state = _USER_STATE.get(user_id)
    if not state or state.get("slug") != slug:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å–∫–æ—á–∏–ª ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        state = {"slug": slug, "params": _get_default_params_from_presets(slug)}
        _USER_STATE[user_id] = state

    try:
        value = json.loads(raw)
    except Exception:
        value = raw

    state["params"][key] = value
    kb = _build_params_keyboard(slug, state["params"])
    title = ReportRegistry.get(slug).title or slug
    await c.message.edit_text(
        f"<b>{title}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏).\n–¢–µ–∫—É—â–∏–µ: {_render_params_summary(state['params'])}",
        reply_markup=kb
    )


# --- –ö–Ω–æ–ø–∫–∞: —Å–±—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
@dp.callback_query(F.data.startswith("reset:"))
async def cb_reset_params(c: CallbackQuery):
    slug = c.data.split(":", 1)[1]
    user_id = c.from_user.id if c.from_user else 0
    _USER_STATE[user_id] = {"slug": slug, "params": _get_default_params_from_presets(slug)}
    params = _USER_STATE[user_id]["params"]
    kb = _build_params_keyboard(slug, params)
    title = ReportRegistry.get(slug).title or slug
    await c.message.edit_text(
        f"<b>{title}</b>\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.\n–¢–µ–∫—É—â–∏–µ: {_render_params_summary(params)}",
        reply_markup=kb
    )


# --- –ö–Ω–æ–ø–∫–∞: –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ (—á—Ç–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ .md)
@dp.callback_query(F.data.startswith("explain:"))
async def cb_explain(c: CallbackQuery):
    slug = c.data.split(":", 1)[1]
    md_path = Path(__file__).parent / "reports" / f"{slug}.md"
    if not md_path.exists():
        await c.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    try:
        text = md_path.read_text(encoding="utf-8")
    except Exception as e:
        await c.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å .md: {e}", show_alert=True)
        return
    # –û—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–µ –º–µ–Ω—è—è —ç–∫—Ä–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    html = _md_to_tg_html(text)
    await c.message.answer(html)


# --- –ö–Ω–æ–ø–∫–∞: –∑–∞–ø—É—Å–∫ –æ—Ç—á—ë—Ç–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
@dp.callback_query(F.data.startswith("do_run:"))
async def cb_do_run(c: CallbackQuery):
    slug = c.data.split(":", 1)[1]

    try:
        ReportRegistry.get(slug)
    except KeyError:
        await c.answer(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç—á—ë—Ç: {slug}", show_alert=True)
        return

    user_id = c.from_user.id if c.from_user else 0
    params = (_USER_STATE.get(user_id) or {}).get("params") or {}

    await bot.send_chat_action(chat_id=c.message.chat.id, action=ChatAction.TYPING)
    await c.message.answer(f"‚è≥ –ó–∞–ø—É—Å–∫–∞—é –æ—Ç—á—ë—Ç <b>{slug}</b> —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {_render_params_summary(params)}")

    try:
        file_path: Path = run_report(slug, params=params)
        await bot.send_chat_action(chat_id=c.message.chat.id, action=ChatAction.UPLOAD_DOCUMENT)
        await c.message.answer_document(
            document=FSInputFile(str(file_path)),
            caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ: <b>{slug}</b>\n–§–∞–π–ª: <code>{file_path.name}</code>"
        )
    except Exception as e:
        await c.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞:\n<code>{e}</code>")


def main():
    import asyncio
    asyncio.run(dp.start_polling(bot))


if __name__ == "__main__":
    main()
