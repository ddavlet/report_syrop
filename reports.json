{
  "name": "reports",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "6b150169-782c-43ff-ac58-7bc9ac7037da",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -2832,
        928
      ],
      "id": "d1b7a424-6eff-4add-8f11-2728acb8091e",
      "name": "Webhook",
      "webhookId": "6b150169-782c-43ff-ac58-7bc9ac7037da"
    },
    {
      "parameters": {
        "text": "=User request:\n{{ $('Transcribe a recording').item.json.text }}\n\nPreviously parsed data:\n{{JSON.stringify($('get memory').item.json.messages)}}\nReports catalog :\n{{ $('stringify').item.json.catalog }}\n\nToday is :\n{{ $today.format('yyyy-MM-dd') }}",
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"report_requested\": { \"type\": \"boolean\", \"description\": \"True if user asked for any report.\" },\n    \"report_slug\": { \"type\": \"string\", \"nullable\": true, \"description\": \"Slug of the requested report (exact). If none, null.\" },\n    \"parameters\": { \"type\": \"object\", \"description\": \"Parameters explicitly provided by user (normalized where possible).\" },\n    \"required_parameters\": {\n      \"type\": \"array\",\n      \"items\": { \"type\": \"string\" },\n      \"description\": \"All required parameter names for the resolved report_slug, taken from the provided report catalog.\"\n    },\n    \"missing_parameters\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": { \"type\": \"string\" },\n          \"allowed\": { \"type\": \"array\", \"items\": {} , \"nullable\": true },\n          \"reason\": { \"type\": \"string\", \"nullable\": true }\n        },\n        \"required\": [\"name\"]\n      },\n      \"description\": \"Which required params are missing or invalid.\"\n    },\n    \"has_all_required_params\": { \"type\": \"boolean\", \"description\": \"True if all required params for this report_slug are present and valid.\" }\n  },\n  \"required\": [\n    \"report_requested\",\n    \"report_slug\",\n    \"parameters\",\n    \"required_parameters\",\n    \"missing_parameters\",\n    \"has_all_required_params\"\n  ]\n}\n",
        "options": {
          "systemPromptTemplate": "You are an expert information extractor.\n\nINPUTS YOU RECEIVE (via the user message/context):\n- transcript: the user's text to analyze (current turn only).\n- catalog: JSON with exact report slugs, aliases, and parameter specs (types, allowed, min/max, format, requirements).\n- previous: JSON from a prior turn (e.g., last resolved report_slug and parameters). May be null.\n\nSTRICT OUTPUT REQUIREMENTS:\n- Return ONLY valid JSON conforming to the provided schema.\n- No markdown, no code fences, no explanations, no trailing text.\n\nFOLLOW-UP PRIORITY:\n- If previous.report_slug exists and THIS message does NOT explicitly name a different slug/alias with a switch verb,\n  treat this message as a FOLLOW-UP to previous.report_slug (assume same report).\n- “Mentions” like “клиенты / client / товар / goods” do NOT imply a new report by themselves.\n- Only switch to a new report when BOTH are true:\n  (a) a clear slug/alias from the catalog is explicitly stated, AND\n  (b) the message includes a switch cue such as: \n     [\"другой отчёт\",\"смени отчёт\",\"переключись\",\"новый отчёт\",\"изменим отчёт\",\"switch report\",\"change report\",\"use <slug> instead\"].\n- If ambiguous (keywords match multiple reports) and previous exists → stay with previous.report_slug.\n\n\nSTRICT EXTRACTION RULES:\n- Do NOT guess or assume values from enums or defaults.\n- Mark a parameter as present ONLY if the transcript explicitly mentions it (or an exact synonym mapping is provided).\n- If a parameter is not explicitly stated, leave it out and report it as missing if required.\n- Generic phrases like “средний чек” do NOT imply any dim value; do not set dim unless the transcript states one of the allowed values or synonyms.\n- Presence of parameter-like words (e.g., numbers/dates) WITHOUT an explicit new slug/alias does NOT imply switching report.\n- Extract only parameters for the decided report_slug; if report_slug is null, still extract generic values but do not force a new slug.\n\n\nGROUP REQUIREMENTS:\n- If no evidence selects an at_least_one_of group, prefer the smallest group (fewest params) for prompting (e.g., choose [\"period_days\"] over [\"date_from\",\"date_to\"]).\n\n\nTASK:\n1) Detect if the user requested a report in THIS message:\n   - Set report_requested = true only if this message expresses intent to get/run/prepare/send a report.\n   - Phrases that CLEARLY cancel/clear memory (e.g., \"reset\", \"cancel\", \"очисти\", \"сброс\", \"/cancel\") must set:\n     report_requested = false, report_slug = null, required_parameters = [], missing_parameters = [], has_all_required_params = false.\n\n2) Resolve report_slug:\n   a) If previous.report_slug exists and the message has no explicit switch cue + new slug/alias, set report_slug = previous.report_slug.\n   b) Else, if the message explicitly names a catalog slug/alias with a switch cue, set report_slug to that new slug.\n   c) Else, if the message explicitly names a single catalog slug/alias (no switch cue) AND NO previous.report_slug → set report_slug accordingly.\n   d) Else, if multiple matches or only generic words are present → if previous.report_slug exists, keep it; otherwise leave report_slug = null.\n   e) Never invent slugs not present in the catalog.\n\n\n3) Extract parameters from THIS message into \"parameters\":\n   - Normalize numbers (e.g., \"30 дней\" → 30) and dates (YYYY-MM-DD).\n   - Do not copy parameters from `previous` into \"parameters\"; only extract what is mentioned now.\n     (Downstream logic can merge if needed.)\n\n4) required_parameters:\n   - From catalog[report_slug].requirements:\n     - Include all in `required`, and if any at_least_one_of groups exist, choose one group that would satisfy the rule.\n   - If no report_slug, set required_parameters = [].\n\n5) missing_parameters:\n   - Compare \"parameters\" to catalog constraints (type, enum, min/max, format, requirements).\n   - For each required or selected group param that is absent or invalid, add an entry:\n      \"name\": <param>, \"reason\": \"not_provided\" | \"invalid_type\" | \"out_of_range\" | \"not_in_allowed\" | \"invalid_format\" \n   - If the catalog has an enum, you MAY include \"allowed\": [ ... ]; otherwise omit \"allowed\".\n\n6) has_all_required_params:\n   - true only if report_slug is set AND all required/selected-group parameters are present and valid.\n   - Otherwise false.\n\nEDGE CASES:\n- If no report intent in THIS message AND no clear follow-up content: \n  report_requested = false, report_slug = null, required_parameters = [], missing_parameters = [], has_all_required_params = false.\n- If message is a memory reset: behave as reset regardless of previous state.\n\nDO NOT:\n- Do not include markdown/code fences.\n- Do not invent parameters or defaults not specified by the user or catalog.\n- Do not copy `previous.parameters` into \"parameters\"."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.2,
      "position": [
        -1584,
        928
      ],
      "id": "e62e8ccc-27d2-4805-8d25-1334de2652c8",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"reports\": [\n    {\n      \"slug\": \"new_customers\",\n      \"title\": \"New Customers (Acquisition Effectiveness)\",\n      \"aliases\": [\n        \"new customers\",\n        \"new clients\",\n        \"acquisition\",\n        \"новые клиенты\",\n        \"новые покупатели\",\n        \"привлечение\",\n        \"новые\"\n      ],\n      \"requirements\": {\n        \"at_least_one_of\": [\n          [\"period_days\"],\n          [\"date_from\", \"date_to\"]\n        ]\n      },\n      \"params\": {\n        \"period_days\": {\n          \"type\": \"integer\",\n          \"min\": 1,\n          \"max\": 5000,\n          \"description\": \"Number of days from today to search for customers with their first order\"\n        },\n        \"date_from\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"min\": \"2000-01-01\",\n          \"max\": \"2100-12-31\",\n          \"description\": \"Exact start date for analysis\"\n        },\n        \"date_to\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"min\": \"2000-01-01\",\n          \"max\": \"2100-12-31\",\n          \"description\": \"Exact end date for analysis\"\n        }\n      }\n    },\n    {\n      \"slug\": \"inactive_clients\",\n      \"title\": \"Inactive Clients\",\n      \"aliases\": [\n        \"inactive\",\n        \"inactive clients\",\n        \"dormant\",\n        \"lost clients\",\n        \"неактивные\",\n        \"неактивные клиенты\",\n        \"спящие клиенты\",\n        \"потерянные клиенты\"\n      ],\n      \"requirements\": {\n        \"required\": [\"cutoff_days\", \"start_date\"]\n      },\n      \"params\": {\n        \"cutoff_days\": {\n          \"type\": \"integer\",\n          \"min\": 1,\n          \"max\": 5000,\n          \"description\": \"Days without purchases to determine inactivity\"\n        },\n        \"start_date\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"min\": \"2000-01-01\",\n          \"max\": \"2100-12-31\",\n          \"description\": \"Start of the period (date)\"\n        }\n      }\n    },\n    {\n      \"slug\": \"average_check\",\n      \"title\": \"Average Check (AOV) in Different Dimensions\",\n      \"aliases\": [\n        \"average check\",\n        \"average order value\",\n        \"aov analysis\",\n        \"средний чек\",\n        \"aov\",\n        \"средний заказ\",\n        \"средняя покупка\"\n      ],\n      \"requirements\": {\n        \"required\": [\"dim\", \"date_from\", \"date_to\"],\n        \"description\": \"dim is always required, plus both date_from and date_to\"\n      },\n      \"params\": {\n        \"dim\": {\n          \"type\": \"string\",\n          \"allowed\": [\"overall\", \"client\", \"month\", \"client_month\"],\n          \"description\": \"Dimension of analysis: overall - overall AOV, client - by clients, month - by months, client_month - by clients and months\"\n        },\n        \"date_from\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"min\": \"2000-01-01\",\n          \"max\": \"2100-12-31\",\n          \"description\": \"Start date\"\n        },\n        \"date_to\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"min\": \"2000-01-01\",\n          \"max\": \"2100-12-31\",\n          \"description\": \"End date\"\n        }\n      }\n    },\n    {\n      \"slug\": \"abc_goods\",\n      \"title\": \"ABC Analysis of Goods by Revenue\",\n      \"aliases\": [\n        \"abc goods\",\n        \"abc products\",\n        \"abc analysis goods\",\n        \"товары abc\",\n        \"abc товары\",\n        \"abc товаров\",\n        \"abc по товарам\",\n        \"abc анализ товаров\"\n      ],\n      \"requirements\": {\n        \"at_least_one_of\": [\n          [\"period_days\"],\n          [\"date_from\", \"date_to\"]\n        ]\n      },\n      \"params\": {\n        \"period_days\": {\n          \"type\": \"integer\",\n          \"min\": 1,\n          \"max\": 5000,\n          \"description\": \"Number of days for goods analysis\"\n        },\n        \"date_from\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"min\": \"2000-01-01\",\n          \"max\": \"2100-12-31\",\n          \"description\": \"Start date\"\n        },\n        \"date_to\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"min\": \"2000-01-01\",\n          \"max\": \"2100-12-31\",\n          \"description\": \"End date\"\n        }\n      }\n    },\n    {\n      \"slug\": \"abc_clients\",\n      \"title\": \"ABC Analysis of Clients by Revenue\",\n      \"aliases\": [\n        \"abc clients\",\n        \"abc analysis clients\",\n        \"клиенты abc\",\n        \"abc revenue\",\n        \"abc клиенты\",\n        \"abc по клиентам\",\n        \"abc анализ клиентов\"\n      ],\n      \"requirements\": {\n        \"at_least_one_of\": [\n          [\"period_days\"],\n          [\"date_from\", \"date_to\"]\n        ]\n      },\n      \"params\": {\n        \"period_days\": {\n          \"type\": \"integer\",\n          \"min\": 1,\n          \"max\": 5000,\n          \"description\": \"Number of days for client analysis\"\n        },\n        \"date_from\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"min\": \"2000-01-01\",\n          \"max\": \"2100-12-31\",\n          \"description\": \"Start date\"\n        },\n        \"date_to\": {\n          \"type\": \"string\",\n          \"format\": \"date\",\n          \"min\": \"2000-01-01\",\n          \"max\": \"2100-12-31\",\n          \"description\": \"End date\"\n        }\n      }\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2384,
        928
      ],
      "id": "49677263-20ec-49ab-a188-cd5e4477d20e",
      "name": "catalog"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "95883dfa-3c23-4212-9276-ad39aca98891",
              "name": "catalog",
              "value": "={{JSON.stringify($json.reports)}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2160,
        928
      ],
      "id": "1ba84035-d4ef-47f2-a943-278daf45824b",
      "name": "stringify"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cdbaa0ec-95c0-4363-861d-f12da5fd8930",
              "leftValue": "={{ $json.output.report_requested }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "ac0c35ca-e39c-4545-b24a-305a53ac1df2",
              "leftValue": "={{ $json.output.report_slug }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1232,
        928
      ],
      "id": "a7bc49e2-3829-41dd-bf11-4ea8f97f2c02",
      "name": "Report requested"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4d6039a0-1946-4994-bac2-21d536d81b80",
              "leftValue": "={{ $json.output.has_all_required_params }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -944,
        688
      ],
      "id": "0edf213b-4b04-484d-8fe5-6e2c1f4f59e5",
      "name": "Has all params"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -240,
        736
      ],
      "id": "e9197a6d-5255-47b1-b0d3-11c88db5a4e9",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        464,
        784
      ],
      "id": "ff46d6b3-463d-4ce7-b8e3-847bd13652ce",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "mode": "insert",
        "messages": {
          "messageValues": [
            {
              "type": "ai",
              "message": "={{JSON.stringify($('Has all params').item.json.output)}}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        400,
        1072
      ],
      "id": "fdb2b6ff-9151-40e2-90ca-141e636faabf",
      "name": "insert memory",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "options": {
          "groupMessages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -1936,
        928
      ],
      "id": "09c52606-fc62-42dc-83d2-9adf59a7624a",
      "name": "get memory"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "636f2a8a-8ed7-47fd-977f-79d063417df5",
              "name": "output.ready",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "e159191a-50ed-4261-ab10-0925e0a3db5b",
              "name": "output.report_slug",
              "value": "={{ $('Information Extractor').item.json.output.report_slug }}",
              "type": "string"
            },
            {
              "id": "258ca915-7790-4fd9-ae40-88be71ecd67e",
              "name": "output.parameters",
              "value": "={{ $json.output.parameters }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -592,
        592
      ],
      "id": "c1d6ce19-d306-43f7-93b3-be5158fdd1d8",
      "name": "Report"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "636f2a8a-8ed7-47fd-977f-79d063417df5",
              "name": "output.ready",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "e159191a-50ed-4261-ab10-0925e0a3db5b",
              "name": "output.message",
              "value": "={{ $json.message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        928
      ],
      "id": "9bd9e6cb-6060-4cd2-a29b-d4a4e925052e",
      "name": "Additional info"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1504,
        1152
      ],
      "id": "9b8254a9-70d7-430b-b29a-f89948589738",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "G37TxfdqSs5oRRoF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "audio",
        "options": {
          "language": "ru"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -2608,
        928
      ],
      "id": "543c0842-f020-4334-bd40-27a99543347f",
      "name": "Transcribe a recording",
      "credentials": {
        "openAiApi": {
          "id": "G37TxfdqSs5oRRoF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $('Transcribe a recording').item.json.text }}"
            },
            {
              "content": "You are a language detection utility.\nReturn ONLY the ISO 639-1 code of the language of the input text (e.g. \"en\", \"ru\", \"de\").\nNo explanations, no extra text.",
              "role": "system"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -656,
        928
      ],
      "id": "7ffa28cd-33ba-4476-8c58-d7d12a471801",
      "name": "Detect language",
      "credentials": {
        "openAiApi": {
          "id": "G37TxfdqSs5oRRoF",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "=Report to generate:\n{{ $('Has all params').item.json.output.report_slug }}\nUser’s initial request:\n{{ $('Transcribe a recording').item.json.text }}\nMissing parameters:\n{{JSON.stringify($('Information Extractor').item.json.output.missing_parameters)}}\nAll extracted parameters:\n{{JSON.stringify($('Information Extractor').item.json.output.parameters)}}\nReports catalog:\n{{ $('stringify').item.json.catalog }}\nUser language to respond:\n{{ $json.message.content.language || ru }}"
            },
            {
              "content": "Task:\n- Check what information is missing or invalid for this report.\n- Explain to the user in clear, natural language what else they need to provide.\n- Use the same language as the user’s initial request.\n- Give short examples of acceptable values for each missing parameter.\n- Local currency is \"Sum\"\n\nOutput:\nReturn a short, friendly message that can be sent directly to the user.",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -304,
        928
      ],
      "id": "2891c321-f566-4882-8ba2-2f9979a2f88d",
      "name": "Detect language1",
      "credentials": {
        "openAiApi": {
          "id": "G37TxfdqSs5oRRoF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "delete",
        "deleteMode": "all"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        48,
        1408
      ],
      "id": "c9208812-4006-4fc2-8837-716b650f42fc",
      "name": "Delete memory"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "=User’s initial request:\n\"{{ $('Transcribe a recording').item.json.text }}\"\n\nUser language to respond:\n{{ $json.message.content.language || ru }}\n\nReports catalog (JSON):\n{{ $('stringify').item.json.catalog }}"
            },
            {
              "content": "You are a helpful assistant that guides the user when no specific report request was detected.\n\nYou have access to a tool (the reports database) that contains structured information about all available reports.  \n- Each entry includes: slug, title, aliases, parameters (types, ranges, requirements), and a description in English.  \n- Use this tool to identify which reports exist, provide short explanations, and suggest relevant reports.  \n- Always output your final reply in the user’s language: {{ $json.lang }}. If not provided, infer from the initial_request.  \n- Never invent reports or parameters not present in the database.\n\nGoals:\n- Show the user which reports are available.\n- Provide concise information about a specific report if the user clearly asks about it.\n- Help them choose the right report from the catalog.\n- Keep answers short (1–3 sentences, or a compact bulleted list).\n\nBehavior:\n1) If the user asks “what reports are there” or is browsing:\n   - Suggest 3–6 reports from the catalog, each with a short 2–4 word hint (using the tool for descriptions).\n2) If the user’s message contains keywords that match multiple possible reports:\n   - Offer a compact choice list (up to 5) of the closest matches.\n3) If the user clearly asks for information about a single report (slug/title/alias matches):\n   - Provide a short explanation of what the report does and what insights it gives, using the tool.\n4) If the user asked to reset/cancel/clear memory:\n   - Acknowledge reset and then list 3–6 popular reports they can choose from next.\n5) Do NOT try to collect parameters in this fallback mode.\n   - Your only role here is to help the user explore and choose a report, or understand what a report is about.\n6) Never output JSON, code blocks, or technical detail. Just plain, friendly text.\n\nImportant:\n- Be concise, natural, and immediately actionable.\n- Do not say “send the report” or “generate now.” \n- Just guide the user to identify or learn about the report they want.\n",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -656,
        1264
      ],
      "id": "447c75c1-da9c-40dc-9ce0-2efb77bde5eb",
      "name": "Detect language3",
      "credentials": {
        "openAiApi": {
          "id": "G37TxfdqSs5oRRoF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "636f2a8a-8ed7-47fd-977f-79d063417df5",
              "name": "output.ready",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "e159191a-50ed-4261-ab10-0925e0a3db5b",
              "name": "output.message",
              "value": "={{ $json.message.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -240,
        1264
      ],
      "id": "580569fb-9779-4f73-a371-467d1cff1ad7",
      "name": "No request"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        112,
        1120
      ],
      "id": "9bbdd786-1762-4165-8c2a-037227b5fbf2",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "mode": "delete",
        "deleteMode": "all"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryManager",
      "typeVersion": 1.1,
      "position": [
        -304,
        336
      ],
      "id": "7d72d529-b604-4790-a37e-4973942973c3",
      "name": "Delete memory1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2832,
        1744
      ],
      "id": "633f431b-3dc4-4fcc-969e-19b7f069d6b5",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "G37TxfdqSs5oRRoF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "formTitle": "Files",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Report documents",
              "fieldType": "file",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.3,
      "position": [
        -2832,
        0
      ],
      "id": "744f5164-57c6-46bc-8ec2-248774989d01",
      "name": "On form submission",
      "webhookId": "e806eab9-80b6-415d-9f6f-31a9f0e6a9fb"
    },
    {
      "parameters": {
        "mode": "insert",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        -2608,
        0
      ],
      "id": "165e0d0c-e5c2-4548-befd-9f4f418185f5",
      "name": "Postgres PGVector Store1",
      "credentials": {
        "postgres": {
          "id": "s4ZeTnwsMGE6sfTB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2608,
        224
      ],
      "id": "97b05b10-d21b-475e-bee8-85c28c02341c",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "G37TxfdqSs5oRRoF",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "dataType": "binary",
        "loader": "textLoader",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        -2480,
        224
      ],
      "id": "14f4b0e6-c434-4fbb-b418-5a013822bee7",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "You have access to a structured database of reports.\n- Each entry includes a full description (in English only).\n- Use this database to:\n  • Identify which reports exist and their purposes,\n  • Provide short explanations about reports when the user asks,\n  • Suggest relevant reports that match the user’s request or keywords.\n\nImportant:\n- The database text is in English, but you must always answer the user in their own language: {{ $json.lang }}.\n- Never invent reports not in the database.\n- When suggesting reports, use the database title and description to give short, friendly hints.\n- When explaining a single report, use the description from the database but summarize it naturally in the user’s language.\n",
        "topK": 5,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        -2624,
        1744
      ],
      "id": "ddba8754-78fc-444e-95d8-bd632efdf3d2",
      "name": "Reports database",
      "credentials": {
        "postgres": {
          "id": "s4ZeTnwsMGE6sfTB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.query.chat_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -240,
        560
      ],
      "id": "59f8685d-5856-4a4a-b7e0-7981b9ded8fc",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "s4ZeTnwsMGE6sfTB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.query.chat_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        480,
        1296
      ],
      "id": "360f56b8-689c-4afd-b0a6-2eebeb4a585d",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "s4ZeTnwsMGE6sfTB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Webhook').item.json.query.chat_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        128,
        1632
      ],
      "id": "815c9852-4f76-425c-b4d8-4bcac37e56d9",
      "name": "Postgres Chat Memory2",
      "credentials": {
        "postgres": {
          "id": "s4ZeTnwsMGE6sfTB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "GPT-4.1-NANO"
        },
        "messages": {
          "values": [
            {
              "content": "={{ $('Transcribe a recording').item.json.text }}"
            },
            {
              "content": "You are a language detection utility.\nReturn ONLY the ISO 639-1 code of the language of the input text (e.g. \"en\", \"ru\", \"de\").\nNo explanations, no extra text.",
              "role": "system"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1008,
        1264
      ],
      "id": "08321b73-4ea6-4d03-9407-a5c8ec041e4c",
      "name": "Detect language2",
      "credentials": {
        "openAiApi": {
          "id": "G37TxfdqSs5oRRoF",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$('Webhook').item.json.query.chat_id}}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -1936,
        1136
      ],
      "id": "edfe0cbb-24a7-4f5c-9748-ad92585afc75",
      "name": "Postgres Chat Memory3",
      "credentials": {
        "postgres": {
          "id": "s4ZeTnwsMGE6sfTB",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Transcribe a recording",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "catalog": {
      "main": [
        [
          {
            "node": "stringify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Report requested",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "stringify": {
      "main": [
        [
          {
            "node": "get memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Report requested": {
      "main": [
        [
          {
            "node": "Has all params",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Detect language2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has all params": {
      "main": [
        [
          {
            "node": "Report",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Detect language",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get memory": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Report": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          },
          {
            "node": "Delete memory1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Additional info": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          },
          {
            "node": "insert memory",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe a recording": {
      "main": [
        [
          {
            "node": "catalog",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect language": {
      "main": [
        [
          {
            "node": "Detect language1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect language1": {
      "main": [
        [
          {
            "node": "Additional info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Detect language3": {
      "main": [
        [
          {
            "node": "No request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No request": {
      "main": [
        [
          {
            "node": "Delete memory",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Reports database",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Reports database": {
      "ai_tool": [
        []
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Delete memory1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "insert memory",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory2": {
      "ai_memory": [
        [
          {
            "node": "Delete memory",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Detect language2": {
      "main": [
        [
          {
            "node": "Detect language3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory3": {
      "ai_memory": [
        [
          {
            "node": "get memory",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "97d43471-1af9-44a7-8d9f-51827132424e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "41e041299e501e29187c1d2df3524f0d691c3403fed3c4f1d68bb024bb95c1f8"
  },
  "id": "LNN5UChqBeVseFWi",
  "tags": []
}